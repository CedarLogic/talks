-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParholOgram where
import AbsholOgram
import LexholOgram
import ErrM
}

%name pProcess Process
%name pListGuardedProcess ListGuardedProcess
%name pListProcess ListProcess
%name pGuardedProcess GuardedProcess
%name pAbstraction Abstraction
%name pConcretion Concretion
%name pListPattern ListPattern
%name pPattern Pattern
%name pQuery Query
%name pSum Sum
%name pListGuardedPattern ListGuardedPattern
%name pGuardedPattern GuardedPattern
%name pTuplePattern TuplePattern
%name pListNestedTuplePattern ListNestedTuplePattern
%name pNestedTuplePattern NestedTuplePattern
%name pSite Site
%name pCode Code
%name pVariable Variable
%name pValue Value
%name pGroundLiteral GroundLiteral
%name pBooleanLiteral BooleanLiteral
%name pCase Case
%name pRec Rec
%name pModels Models
%name pPar Par
%name pZero Zero
%name pLParen LParen
%name pRParen RParen
%name pLMSet LMSet
%name pRMSet RMSet
%name pLAngle LAngle
%name pRAngle RAngle
%name pLBrack LBrack
%name pRBrack RBrack
%name pLCurly LCurly
%name pRCurly RCurly
%name pQuote Quote
%name pBang Bang
%name pWhimper Whimper
%name pAmpersand Ampersand
%name pTilde Tilde
%name pAt At
%name pStar Star
%name pDot Dot
%name pUnderscore Underscore
%name pAssign Assign
%name pCons Cons
%name pLQuote LQuote
%name pRQuote RQuote

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 ';' { PT _ (TS ";") }
 ',' { PT _ (TS ",") }
 '+' { PT _ (TS "+") }
 '|=' { PT _ (TS "|=") }
 '|' { PT _ (TS "|") }
 '0' { PT _ (TS "0") }
 '(' { PT _ (TS "(") }
 ')' { PT _ (TS ")") }
 '{|' { PT _ (TS "{|") }
 '|}' { PT _ (TS "|}") }
 '<' { PT _ (TS "<") }
 '>' { PT _ (TS ">") }
 '[' { PT _ (TS "[") }
 ']' { PT _ (TS "]") }
 '{' { PT _ (TS "{") }
 '}' { PT _ (TS "}") }
 '\'' { PT _ (TS "'") }
 '!' { PT _ (TS "!") }
 '?' { PT _ (TS "?") }
 '&' { PT _ (TS "&") }
 '~' { PT _ (TS "~") }
 '@' { PT _ (TS "@") }
 '*' { PT _ (TS "*") }
 '.' { PT _ (TS ".") }
 '_' { PT _ (TS "_") }
 ':=' { PT _ (TS ":=") }
 '::' { PT _ (TS "::") }
 '<<' { PT _ (TS "<<") }
 '>>' { PT _ (TS ">>") }
 'case' { PT _ (TS "case") }
 'false' { PT _ (TS "false") }
 'rec' { PT _ (TS "rec") }
 'true' { PT _ (TS "true") }

L_ident  { PT _ (TV $$) }
L_charac { PT _ (TC $$) }
L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }
L_quoted { PT _ (TL $$) }
L_err    { _ }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Char    :: { Char }    : L_charac { (read $1) :: Char }
Integer :: { Integer } : L_integ  { (read $1) :: Integer }
Double  :: { Double }  : L_doubl  { (read $1) :: Double }
String  :: { String }  : L_quoted { $1 }

Process :: { Process }
Process : Case LCurly ListGuardedProcess RCurly { Selection $1 $2 (reverse $3) $4 } 
  | LCurly ListProcess RCurly { Composition $1 (reverse $2) $3 }
  | At Site { Dereference $1 $2 }


ListGuardedProcess :: { [GuardedProcess] }
ListGuardedProcess : {- empty -} { [] } 
  | ListGuardedProcess GuardedProcess ';' { flip (:) $1 $2 }


ListProcess :: { [Process] }
ListProcess : {- empty -} { [] } 
  | ListProcess Process ';' { flip (:) $1 $2 }


GuardedProcess :: { GuardedProcess }
GuardedProcess : Site Abstraction { Input $1 $2 } 
  | Site Concretion { Output $1 $2 }


Abstraction :: { Abstraction }
Abstraction : Whimper LParen ListPattern RParen Dot Process { AgentIn $1 $2 (reverse $3) $4 $5 $6 } 


Concretion :: { Concretion }
Concretion : Bang LParen ListPattern RParen Assign LParen ListProcess RParen Dot Process { AgentOut $1 $2 (reverse $3) $4 $5 $6 (reverse $7) $8 $9 $10 } 


ListPattern :: { [Pattern] }
ListPattern : {- empty -} { [] } 
  | ListPattern Pattern ',' { flip (:) $1 $2 }


Pattern :: { Pattern }
Pattern : Code { Value $1 } 
  | Query { QueryPattern $1 }


Query :: { Query }
Query : Sum { SumQuery $1 } 
  | LCurly ListPattern RCurly { ParQuery $1 (reverse $2) $3 }
  | At LQuote Pattern RQuote { DropQuery $1 $2 $3 $4 }
  | Rec Ident Dot Pattern { RecQuery $1 $2 $3 $4 }


Sum :: { Sum }
Sum : Variable { Variable $1 } 
  | ListGuardedPattern { Summand (reverse $1) }


ListGuardedPattern :: { [GuardedPattern] }
ListGuardedPattern : {- empty -} { [] } 
  | ListGuardedPattern GuardedPattern '+' { flip (:) $1 $2 }


GuardedPattern :: { GuardedPattern }
GuardedPattern : Whimper TuplePattern Dot Query { AbsPattern $1 $2 $3 $4 } 
  | Bang TuplePattern Assign TuplePattern Dot Query { DataPattern $1 $2 $3 $4 $5 $6 }
  | Star Variable Dot Query { DerefPattern $1 $2 $3 $4 }


TuplePattern :: { TuplePattern }
TuplePattern : Variable { TupleVariable $1 } 
  | LParen ListNestedTuplePattern RParen { TupleList $1 (reverse $2) $3 }
  | Pattern Cons TuplePattern { TupleCons $1 $2 $3 }


ListNestedTuplePattern :: { [NestedTuplePattern] }
ListNestedTuplePattern : {- empty -} { [] } 
  | ListNestedTuplePattern NestedTuplePattern ',' { flip (:) $1 $2 }


NestedTuplePattern :: { NestedTuplePattern }
NestedTuplePattern : Pattern { Base $1 } 
  | TuplePattern { Nesting $1 }


Site :: { Site }
Site : Code { CodeSite $1 } 
  | Variable { VariableSite $1 }


Code :: { Code }
Code : LQuote Process RQuote { Quotation $1 $2 $3 } 


Variable :: { Variable }
Variable : Ident { Identifier $1 } 
  | Underscore { Wildcard $1 }


Value :: { Value }
Value : Code { Codification $1 } 
  | GroundLiteral { Ground $1 }


GroundLiteral :: { GroundLiteral }
GroundLiteral : BooleanLiteral { Boolean $1 } 
  | Char { Char $1 }
  | Integer { Integer $1 }
  | Double { Double $1 }
  | String { String $1 }


BooleanLiteral :: { BooleanLiteral }
BooleanLiteral : 'true' { BooleanTrue } 
  | 'false' { BooleanFalse }


Case :: { Case }
Case : 'case' { CaseIt } 


Rec :: { Rec }
Rec : 'rec' { RecIt } 


Models :: { Models }
Models : '|=' { ModelIt } 


Par :: { Par }
Par : '|' { ParIt } 


Zero :: { Zero }
Zero : '0' { ZeroIt } 


LParen :: { LParen }
LParen : '(' { LParenIt } 


RParen :: { RParen }
RParen : ')' { RParenIt } 


LMSet :: { LMSet }
LMSet : '{|' { LMSetIt } 


RMSet :: { RMSet }
RMSet : '|}' { RMSetIt } 


LAngle :: { LAngle }
LAngle : '<' { LAngleIt } 


RAngle :: { RAngle }
RAngle : '>' { RAngleIt } 


LBrack :: { LBrack }
LBrack : '[' { LBrackIt } 


RBrack :: { RBrack }
RBrack : ']' { RBrackIt } 


LCurly :: { LCurly }
LCurly : '{' { LCurlyIt } 


RCurly :: { RCurly }
RCurly : '}' { RCurlyIt } 


Quote :: { Quote }
Quote : '\'' { QuoteIt } 


Bang :: { Bang }
Bang : '!' { BangIt } 


Whimper :: { Whimper }
Whimper : '?' { WhimperIt } 


Ampersand :: { Ampersand }
Ampersand : '&' { AmpersandIt } 


Tilde :: { Tilde }
Tilde : '~' { TildeIt } 


At :: { At }
At : '@' { AtIt } 


Star :: { Star }
Star : '*' { StarIt } 


Dot :: { Dot }
Dot : '.' { DotIt } 


Underscore :: { Underscore }
Underscore : '_' { UnderscoreIt } 


Assign :: { Assign }
Assign : ':=' { AssignIt } 


Cons :: { Cons }
Cons : '::' { ConsIt } 


LQuote :: { LQuote }
LQuote : '<<' { LQuoteIt } 


RQuote :: { RQuote }
RQuote : '>>' { RQuoteIt } 



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map prToken (take 4 ts))

myLexer = tokens
}

