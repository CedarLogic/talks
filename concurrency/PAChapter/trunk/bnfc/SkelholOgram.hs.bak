module SkelholOgram where

-- Haskell module generated by the BNF converter

import AbsholOgram
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transProcess :: Process -> Result
transProcess x = case x of
  Selection case' lcurly guardedprocesss rcurly  -> failure x
  Composition lcurly processs rcurly  -> failure x
  Dereference at site  -> failure x


transGuardedProcess :: GuardedProcess -> Result
transGuardedProcess x = case x of
  Input site abstraction  -> failure x
  Output site concretion  -> failure x


transAbstraction :: Abstraction -> Result
transAbstraction x = case x of
  AgentIn whimper lparen patterns rparen dot process  -> failure x


transConcretion :: Concretion -> Result
transConcretion x = case x of
  AgentOut bang lparen0 patterns rparen1 assign lparen processs rparen dot process  -> failure x


transPattern :: Pattern -> Result
transPattern x = case x of
  Value code  -> failure x
  QueryPattern query  -> failure x


transQuery :: Query -> Result
transQuery x = case x of
  SumQuery sum  -> failure x
  ParQuery lcurly patterns rcurly  -> failure x
  DropQuery at lquote pattern rquote  -> failure x
  RecQuery rec id dot pattern  -> failure x


transSum :: Sum -> Result
transSum x = case x of
  Variable variable  -> failure x
  Summand guardedpatterns  -> failure x


transGuardedPattern :: GuardedPattern -> Result
transGuardedPattern x = case x of
  AbsPattern whimper tuplepattern dot query  -> failure x
  DataPattern bang tuplepattern0 assign tuplepattern dot query  -> failure x
  DerefPattern star variable dot query  -> failure x


transTuplePattern :: TuplePattern -> Result
transTuplePattern x = case x of
  TupleVariable variable  -> failure x
  TupleList lparen nestedtuplepatterns rparen  -> failure x
  TupleCons pattern cons tuplepattern  -> failure x


transNestedTuplePattern :: NestedTuplePattern -> Result
transNestedTuplePattern x = case x of
  Base pattern  -> failure x
  Nesting tuplepattern  -> failure x


transSite :: Site -> Result
transSite x = case x of
  CodeSite code  -> failure x
  VariableSite variable  -> failure x


transCode :: Code -> Result
transCode x = case x of
  Quotation lquote process rquote  -> failure x


transVariable :: Variable -> Result
transVariable x = case x of
  Identifier id  -> failure x
  Wildcard underscore  -> failure x


transValue :: Value -> Result
transValue x = case x of
  Codification code  -> failure x
  Ground groundliteral  -> failure x


transGroundLiteral :: GroundLiteral -> Result
transGroundLiteral x = case x of
  Boolean booleanliteral  -> failure x
  Char c  -> failure x
  Integer n  -> failure x
  Double d  -> failure x
  String str  -> failure x


transBooleanLiteral :: BooleanLiteral -> Result
transBooleanLiteral x = case x of
  BooleanTrue  -> failure x
  BooleanFalse  -> failure x


transCase :: Case -> Result
transCase x = case x of
  CaseIt  -> failure x


transRec :: Rec -> Result
transRec x = case x of
  RecIt  -> failure x


transModels :: Models -> Result
transModels x = case x of
  ModelIt  -> failure x


transPar :: Par -> Result
transPar x = case x of
  ParIt  -> failure x


transZero :: Zero -> Result
transZero x = case x of
  ZeroIt  -> failure x


transLParen :: LParen -> Result
transLParen x = case x of
  LParenIt  -> failure x


transRParen :: RParen -> Result
transRParen x = case x of
  RParenIt  -> failure x


transLMSet :: LMSet -> Result
transLMSet x = case x of
  LMSetIt  -> failure x


transRMSet :: RMSet -> Result
transRMSet x = case x of
  RMSetIt  -> failure x


transLAngle :: LAngle -> Result
transLAngle x = case x of
  LAngleIt  -> failure x


transRAngle :: RAngle -> Result
transRAngle x = case x of
  RAngleIt  -> failure x


transLBrack :: LBrack -> Result
transLBrack x = case x of
  LBrackIt  -> failure x


transRBrack :: RBrack -> Result
transRBrack x = case x of
  RBrackIt  -> failure x


transLCurly :: LCurly -> Result
transLCurly x = case x of
  LCurlyIt  -> failure x


transRCurly :: RCurly -> Result
transRCurly x = case x of
  RCurlyIt  -> failure x


transQuote :: Quote -> Result
transQuote x = case x of
  QuoteIt  -> failure x


transBang :: Bang -> Result
transBang x = case x of
  BangIt  -> failure x


transWhimper :: Whimper -> Result
transWhimper x = case x of
  WhimperIt  -> failure x


transAmpersand :: Ampersand -> Result
transAmpersand x = case x of
  AmpersandIt  -> failure x


transTilde :: Tilde -> Result
transTilde x = case x of
  TildeIt  -> failure x


transAt :: At -> Result
transAt x = case x of
  AtIt  -> failure x


transStar :: Star -> Result
transStar x = case x of
  StarIt  -> failure x


transDot :: Dot -> Result
transDot x = case x of
  DotIt  -> failure x


transUnderscore :: Underscore -> Result
transUnderscore x = case x of
  UnderscoreIt  -> failure x


transAssign :: Assign -> Result
transAssign x = case x of
  AssignIt  -> failure x


transCons :: Cons -> Result
transCons x = case x of
  ConsIt  -> failure x


transLQuote :: LQuote -> Result
transLQuote x = case x of
  LQuoteIt  -> failure x


transRQuote :: RQuote -> Result
transRQuote x = case x of
  RQuoteIt  -> failure x



