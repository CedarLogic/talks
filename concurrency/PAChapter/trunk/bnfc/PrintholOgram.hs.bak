{-# OPTIONS -fno-warn-incomplete-patterns #-}
module PrintholOgram where

-- pretty-printer generated by the BNF converter

import AbsholOgram
import Char

-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString i)



instance Print Process where
  prt i e = case e of
   Selection case' lcurly guardedprocesss rcurly -> prPrec i 0 (concatD [prt 0 case' , prt 0 lcurly , prt 0 guardedprocesss , prt 0 rcurly])
   Composition lcurly processs rcurly -> prPrec i 0 (concatD [prt 0 lcurly , prt 0 processs , prt 0 rcurly])
   Dereference at site -> prPrec i 0 (concatD [prt 0 at , prt 0 site])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])

instance Print GuardedProcess where
  prt i e = case e of
   Input site abstraction -> prPrec i 0 (concatD [prt 0 site , prt 0 abstraction])
   Output site concretion -> prPrec i 0 (concatD [prt 0 site , prt 0 concretion])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])

instance Print Abstraction where
  prt i e = case e of
   AgentIn whimper lparen patterns rparen dot process -> prPrec i 0 (concatD [prt 0 whimper , prt 0 lparen , prt 0 patterns , prt 0 rparen , prt 0 dot , prt 0 process])


instance Print Concretion where
  prt i e = case e of
   AgentOut bang lparen0 patterns rparen1 assign lparen processs rparen dot process -> prPrec i 0 (concatD [prt 0 bang , prt 0 lparen0 , prt 0 patterns , prt 0 rparen1 , prt 0 assign , prt 0 lparen , prt 0 processs , prt 0 rparen , prt 0 dot , prt 0 process])


instance Print Pattern where
  prt i e = case e of
   Value code -> prPrec i 0 (concatD [prt 0 code])
   QueryPattern query -> prPrec i 0 (concatD [prt 0 query])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print Query where
  prt i e = case e of
   SumQuery sum -> prPrec i 0 (concatD [prt 0 sum])
   ParQuery lcurly patterns rcurly -> prPrec i 0 (concatD [prt 0 lcurly , prt 0 patterns , prt 0 rcurly])
   DropQuery at lquote pattern rquote -> prPrec i 0 (concatD [prt 0 at , prt 0 lquote , prt 0 pattern , prt 0 rquote])
   RecQuery rec id dot pattern -> prPrec i 0 (concatD [prt 0 rec , prt 0 id , prt 0 dot , prt 0 pattern])


instance Print Sum where
  prt i e = case e of
   Variable variable -> prPrec i 0 (concatD [prt 0 variable])
   Summand guardedpatterns -> prPrec i 0 (concatD [prt 0 guardedpatterns])


instance Print GuardedPattern where
  prt i e = case e of
   AbsPattern whimper tuplepattern dot query -> prPrec i 0 (concatD [prt 0 whimper , prt 0 tuplepattern , prt 0 dot , prt 0 query])
   DataPattern bang tuplepattern0 assign tuplepattern dot query -> prPrec i 0 (concatD [prt 0 bang , prt 0 tuplepattern0 , prt 0 assign , prt 0 tuplepattern , prt 0 dot , prt 0 query])
   DerefPattern star variable dot query -> prPrec i 0 (concatD [prt 0 star , prt 0 variable , prt 0 dot , prt 0 query])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , doc (showString "+") , prt 0 xs])

instance Print TuplePattern where
  prt i e = case e of
   TupleVariable variable -> prPrec i 0 (concatD [prt 0 variable])
   TupleList lparen nestedtuplepatterns rparen -> prPrec i 0 (concatD [prt 0 lparen , prt 0 nestedtuplepatterns , prt 0 rparen])
   TupleCons pattern cons tuplepattern -> prPrec i 0 (concatD [prt 0 pattern , prt 0 cons , prt 0 tuplepattern])


instance Print NestedTuplePattern where
  prt i e = case e of
   Base pattern -> prPrec i 0 (concatD [prt 0 pattern])
   Nesting tuplepattern -> prPrec i 0 (concatD [prt 0 tuplepattern])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print Site where
  prt i e = case e of
   CodeSite code -> prPrec i 0 (concatD [prt 0 code])
   VariableSite variable -> prPrec i 0 (concatD [prt 0 variable])


instance Print Code where
  prt i e = case e of
   Quotation lquote process rquote -> prPrec i 0 (concatD [prt 0 lquote , prt 0 process , prt 0 rquote])


instance Print Variable where
  prt i e = case e of
   Identifier id -> prPrec i 0 (concatD [prt 0 id])
   Wildcard underscore -> prPrec i 0 (concatD [prt 0 underscore])


instance Print Value where
  prt i e = case e of
   Codification code -> prPrec i 0 (concatD [prt 0 code])
   Ground groundliteral -> prPrec i 0 (concatD [prt 0 groundliteral])


instance Print GroundLiteral where
  prt i e = case e of
   Boolean booleanliteral -> prPrec i 0 (concatD [prt 0 booleanliteral])
   Char c -> prPrec i 0 (concatD [prt 0 c])
   Integer n -> prPrec i 0 (concatD [prt 0 n])
   Double d -> prPrec i 0 (concatD [prt 0 d])
   String str -> prPrec i 0 (concatD [prt 0 str])


instance Print BooleanLiteral where
  prt i e = case e of
   BooleanTrue  -> prPrec i 0 (concatD [doc (showString "true")])
   BooleanFalse  -> prPrec i 0 (concatD [doc (showString "false")])


instance Print Case where
  prt i e = case e of
   CaseIt  -> prPrec i 0 (concatD [doc (showString "case")])


instance Print Rec where
  prt i e = case e of
   RecIt  -> prPrec i 0 (concatD [doc (showString "rec")])


instance Print Models where
  prt i e = case e of
   ModelIt  -> prPrec i 0 (concatD [doc (showString "|=")])


instance Print Par where
  prt i e = case e of
   ParIt  -> prPrec i 0 (concatD [doc (showString "|")])


instance Print Zero where
  prt i e = case e of
   ZeroIt  -> prPrec i 0 (concatD [doc (showString "0")])


instance Print LParen where
  prt i e = case e of
   LParenIt  -> prPrec i 0 (concatD [doc (showString "(")])


instance Print RParen where
  prt i e = case e of
   RParenIt  -> prPrec i 0 (concatD [doc (showString ")")])


instance Print LMSet where
  prt i e = case e of
   LMSetIt  -> prPrec i 0 (concatD [doc (showString "{|")])


instance Print RMSet where
  prt i e = case e of
   RMSetIt  -> prPrec i 0 (concatD [doc (showString "|}")])


instance Print LAngle where
  prt i e = case e of
   LAngleIt  -> prPrec i 0 (concatD [doc (showString "<")])


instance Print RAngle where
  prt i e = case e of
   RAngleIt  -> prPrec i 0 (concatD [doc (showString ">")])


instance Print LBrack where
  prt i e = case e of
   LBrackIt  -> prPrec i 0 (concatD [doc (showString "[")])


instance Print RBrack where
  prt i e = case e of
   RBrackIt  -> prPrec i 0 (concatD [doc (showString "]")])


instance Print LCurly where
  prt i e = case e of
   LCurlyIt  -> prPrec i 0 (concatD [doc (showString "{")])


instance Print RCurly where
  prt i e = case e of
   RCurlyIt  -> prPrec i 0 (concatD [doc (showString "}")])


instance Print Quote where
  prt i e = case e of
   QuoteIt  -> prPrec i 0 (concatD [doc (showString "'")])


instance Print Bang where
  prt i e = case e of
   BangIt  -> prPrec i 0 (concatD [doc (showString "!")])


instance Print Whimper where
  prt i e = case e of
   WhimperIt  -> prPrec i 0 (concatD [doc (showString "?")])


instance Print Ampersand where
  prt i e = case e of
   AmpersandIt  -> prPrec i 0 (concatD [doc (showString "&")])


instance Print Tilde where
  prt i e = case e of
   TildeIt  -> prPrec i 0 (concatD [doc (showString "~")])


instance Print At where
  prt i e = case e of
   AtIt  -> prPrec i 0 (concatD [doc (showString "@")])


instance Print Star where
  prt i e = case e of
   StarIt  -> prPrec i 0 (concatD [doc (showString "*")])


instance Print Dot where
  prt i e = case e of
   DotIt  -> prPrec i 0 (concatD [doc (showString ".")])


instance Print Underscore where
  prt i e = case e of
   UnderscoreIt  -> prPrec i 0 (concatD [doc (showString "_")])


instance Print Assign where
  prt i e = case e of
   AssignIt  -> prPrec i 0 (concatD [doc (showString ":=")])


instance Print Cons where
  prt i e = case e of
   ConsIt  -> prPrec i 0 (concatD [doc (showString "::")])


instance Print LQuote where
  prt i e = case e of
   LQuoteIt  -> prPrec i 0 (concatD [doc (showString "<<")])


instance Print RQuote where
  prt i e = case e of
   RQuoteIt  -> prPrec i 0 (concatD [doc (showString ">>")])



