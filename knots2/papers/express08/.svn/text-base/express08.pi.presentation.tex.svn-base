\subsection{The syntax and semantics of the notation system}\label{sub:the_syntax_and_semantics_of_the_notation_system} % (fold)

% [Ed. Note: stylistic alternative 1:]
% Having established an intuitive account of the target calculus via the
% encoding, we summarize its technical presentation below. These calculi
% are typically presented by giving a set of generators and relations on
% them. The grammar, below, describing term constructors, freely
% generates the set of processes $\mathcal{P}$ under the operations
% indicated.

% [Ed. Note: stylistic alternative 2:]
Having bootstrapped an intuitive account of the target calculus  \emph{via}
the encoding, we now summarize a technical presentation of this calculus. The
typical presentation of such a calculus follows the style of giving
generators and relations on them. The grammar, below, describing term
constructors, freely generates the set of processes,
$\mathcal{P}$. This set is then quotiented by a relation known as
structural congruence, yielding the set $\mathbb {P}$ mentioned above
in the type signature of the map constituting the encoding.

\subsubsection{Process grammar}\label{subsub:process_grammar}

\begin{mathpar}
  \inferrule* [lab=summation] {} {{M,N} \bc \pzero \;|\; x.A \;|\; M+N}
  \and
  \inferrule* [lab=agent] {} {{A} \bc (\vec{x})P \;| \; [\vec{x}]P}
  \and \\
  \inferrule* [lab=process] {} {{P,Q} \bc N \;| \;P|Q \;| X\langle \vec{y} \rangle \;| \; (\textsf{rec} \; X(\vec{x}).P)\langle \vec{y} \rangle \;| \; (\nu \; \vec{x})P}
\end{mathpar} 

% [Ed. Note: part of stylistic alternative 1:] A relation on
% $\mathcal{P}$ known as structural congruence yields the quotient set
% $\mathbb {P}$, our target calculus.
% [Ed. Note: calling $\mathbb {P}$ the target calculus is slightly inaccurate...]

Note that $\vec{x}$ denotes a vector of names of length
$|\vec{x}|$. In the encodings for knots, crossings and wires given above we
adopted the following standard abbreviations.

\begin{mathpar}
   x?(\vec{y}).P := x.(\vec{y})P \and  x!(\vec{y}).P := x.[\vec{y}]P
   \and
   X(\vec{y}) \plogp P := (\vec{y})(\textsf{rec} \; X(\vec{x}).P)\langle \vec{y} \rangle
   \and \Pi_{i=0}^{n-1}P_i := P_0 | \ldots | P_{n-1}
\end{mathpar}

\subsubsection{Structural congruence}

\paragraph{Free and bound names and alpha-equivalence.} At the
core of structural equivalence is alpha-equivalence which identifies
process that are the same up to a change of variable. Formally, we
recognize the distinction between free and bound names. The free names
of a process, $\freenames{P}$, may be calculated recursively as
follows:

\begin{mathpar}
  \freenames{\pzero} := \emptyset
  \and \\
  \freenames{x?(\vec{y}).P} := \{ x \} \cup (\freenames{P} \setminus \{ \vec{y} \})
  \and 
  \freenames{x!(\vec{y}).P} := \{ x \} \cup \{ \vec{y} \} \cup \freenames{P} 
  \and \\
  \freenames{P|Q} := \freenames{P} \cup \freenames{Q}
  \and
  \freenames{P + Q} := \freenames{P} \cup \freenames{Q}
  \and \\
  \freenames{(\nu \; \vec{y})P} := \freenames{P} \setminus \{ \vec{y} \}
  \and  \\
  \freenames{(\textsf{rec} \; X(\vec{x}).P)\langle \vec{y} \rangle}
  := \{ \vec{y} \} \cup \freenames{P} \setminus \{ \vec{x} \}
\end{mathpar}

The bound names of a process, $\boundnames{P}$, are those names occurring in $P$
that are not free. For example, in $x?(y).0$, the name $x$ is free, while $y$ is bound.

\begin{definition}
Then two processes, $P,Q$, are alpha-equivalent if $P = Q\{\vec{y}/\vec{x}\}$ for
some $\vec{x} \in \boundnames{Q},\vec{y} \in \boundnames{P}$, where $Q\{\vec{y}/\vec{x}\}$
denotes the capture-avoiding substitution of $\vec{y}$ for $\vec{x}$ in $Q$.
\end{definition}

\begin{definition}
  The {\em structural congruence} \cite{SangiorgiWalker} , $\equiv$, between processes is the
  least congruence containing alpha-equivalence, satisfying the
  abelian monoid laws (associativity, commutativity and $\pzero$ as
  identity) for parallel composition $|$ and for summation $+$, in addition to the
  following axioms:
\begin{mathpar}
 (\nu \; x)\pzero \equiv \pzero 
 \and
 (\nu \; x)(\nu \; x)P \equiv (\nu \; x)P \and (\nu \; x)(\nu \; y)P \equiv (\nu \; y)(\nu \; x)P 
 \and \\
 P | (\nu \; x)Q \equiv (\nu \; x)(P|Q), \; \mbox{\textit{if} }x \not\in \freenames{P}
 \and
 (\textsf{rec} \; X(\vec{x}).P)\langle \vec{y} \rangle \equiv P\{\vec{y}/\vec{x}\}\{(\textsf{rec} \; X(\vec{x}).P)/X\}
\end{mathpar}
\end{definition}

\subsubsection{Operational semantics} 

Finally, we introduce the computational dynamics. What marks these
algebras as distinct from other more traditionally studied algebraic
structures, e.g. vector spaces or polynomial rings, is the manner in
which dynamics is captured. In traditional structures, dynamics is typically
expressed through morphisms between such structures, as in linear maps
between vector spaces or morphisms between rings. In algebras
associated with the semantics of computation, the dynamics is
expressed as part of the algebraic structure itself, through a
reduction reduction relation typically denoted by $\red$. Below, we
give a recursive presentation of this relation for the calculus used
in the encoding.

\begin{mathpar}
  \inferrule* [lab=Comm] {\vec{y} \cap \vec{v} = \emptyset \\ |\vec{y}| = |\vec{z}|} { x.(\vec{y})P \juxtap x.(\nu \vec{v})[\vec{z}]P \red (\nu \vec{v})(P\{\vec{z}/\vec{y}\} | Q) }
  \and \\
  \inferrule* [lab=Par] {{P} \red {P}'} {{{P} | {Q}} \red {{P}' | {Q}}}
  \and
  \inferrule* [lab=Equiv]{{{P} \scong {P}'} \andalso {{P}' \red {Q}'} \andalso {{Q}' \scong {Q}}}{{P} \red {Q}}
  \and
  \inferrule* [lab=New] {{P} \red {P}'} {{\newp{{x}}{{P}}} \red {\newp{{x}}{{P}'}}}  
\end{mathpar}

We write $\wred$ for $\red^*$, and $P\red$ if $\exists Q $ such that $ P \red Q$.

In closing this summary, we take the opportunity to observe that it is
precisely the dynamics that distinguishes this encoding. The
equivalence that coincides with knot equivalence is a \emph{behavioral}
equivalence, i.e. an equivalence of the dynamics of processes in the
image of the encoding. In a marked departure from Gauss codes or
DT codes or Conway's ``knotation,'' this facet of the encoding affords
the \emph{conflation} of notation scheme with invariant, providing a
framework in which to establish the distinguishing power of the
invariant and a language in which to express classes of knots as
logical properties, as discussed in subsection \ref{sub:characteristic_formulae}.

\subsubsection{Bisimulation}

The computational dynamics gives rise to another kind of equivalence,
the equivalence of computational behavior. As previously mentioned
this is typically captured \emph{via} some form of bisimulation.

% The notion we use in this paper is weak barbed bisimulation
% \cite{milner91polyadicpi}.

The notion we use in this paper is derived from weak barbed
bisimulation \cite{milner91polyadicpi}. We must introduce an ``up to''
\cite{DBLP:conf/concur/SangiorgiM92} \cite{DBLP:conf/concur/Pous06}
strategy to deal with the fact that Reidemeister moves can not only
introduce or eliminate crossings (see $R_1$ $R_2$), but ``reorder''
them (see $R_3$).

\begin{definition}
  An agent $B$ occurs \emph{unguarded} in $A$ if it has an occurence
  in $A$ not guarded by a prefix $x$. A process $P$ is observable at
  $x$, written here $P \downarrow x$, if some agent $x.A$ occurs
  unguarded in $P$. We write $P \Downarrow x$ if there is $Q$ such
  that $P \wred Q$ and $Q \downarrow x$.
\end{definition}

\begin{definition}
%\label{def.bbisim}
A \emph{barbed bisimulation} is a symmetric binary relation 
${\mathcal S}$ between agents such that $P\rel{S}Q$ implies:
\begin{enumerate}
\item If $P \red P'$ then $Q \wred Q'$ and $P'\rel{S} Q'$, for some $Q'$.
\item If $P\downarrow x$, then $Q\Downarrow x$.
\end{enumerate}
$P$ is barbed bisimilar to $Q$, written
$P \simeq Q$, if $P \rel{S} Q$ for a barbed bisimulation ${\mathcal S}$.
\end{definition}

% One of the principal advantages of this framework is the co-algebraic
% proof method for proving bisimilarity between two processes:
% exhibit a bisimulation \cite{DBLP:conf/lics/Sangiorgi04}.

\subsubsection{Contexts}

One of the principle advantages of computational calculi like the
$\pi$-calculus is a well-defined notion of context,
contextual-equivalence and a correlation between
contextual-equivalence and notions of bisimulation. The notion of
context allows the decomposition of a process into (sub-)process and
its syntactic environment, its context. Thus, a context may be
thought of as a process with a ``hole'' (written $\Box$) in it. The
application of a context $M$ to a process $P$, written $M[P]$, is
tantamount to filling the hole in $M$ with $P$. In this paper we do
not need the full weight of this theory, but do make use of the notion
of context in the proof the main theorem. As will be seen, the
Reidmeister moves amount to decomposing the representation of the knot
into some collection of crossings or wires and the rest of the
knot.

\begin{mathpar}
  \inferrule* [lab=summation] {} {{M_{M},M_{N}} \bc \Box \;|\; x.M_{A} \;|\; M_{M}+M_{N}}
  \and
  \inferrule* [lab=agent] {} {{M_{A}} \bc (\vec{x})M_{P} \;| \; [\vec{x}]M_{P}}
  \and \\
  \inferrule* [lab=process] {} {{M_{P}} \bc M_{N} \;| \;P|M_{P} \;| (\textsf{rec} \; X(\vec{x}).M_{P})\langle \vec{y} \rangle \;| \; (\nu \; \vec{x})M_{P}}
\end{mathpar} 

\begin{definition}[contextual application] Given a context $M$, and
  process $P$, we define the \emph{contextual application}, $M[P] :=
  M\{P/\Box\}$. That is, the contextual application of M to P is the
  substitution of $P$ for $\Box$ in $M$.
\end{definition}

\begin{example}\label{example:trefoilcontext} For example, if we take
%   \begin{mathpar}
%   M_{3_1} :=
%    (v_0 ... v_{5}) (\nu \; u_0)C(v_0,v_1,v_2,v_3,u_0)
%     | W(v_2,v_7) | \Box
%     \and \\
%     | (\nu \; u_1)C(v_4,v_5,v_6,v_7,u_1)
%     | W(v_4,v_9) | W(v_5,v_8)
%     \and \\
%     | (\nu \; u_2)C(v_8,v_9,v_{10},v_{11},u_2)
%     | W(v_{10},v_0) | W(v_{11},v_1)
%   \end{mathpar}
  \begin{align*}
    M_{3_1} := (v_0 ... v_{5}) & (\nu \; u_0)C(v_0,v_1,v_2,v_3,u_0) \\
    & | W(v_2,v_7) | \Box \\
    & | (\nu \; u_1)C(v_4,v_5,v_6,v_7,u_1) \\
    & | W(v_4,v_9) | W(v_5,v_8) \\
    & | (\nu \; u_2)C(v_8,v_9,v_{10},v_{11},u_2) \\
    & | W(v_{10},v_0) | W(v_{11},v_1)
  \end{align*}
then $\meaningof{3_1} = M_{3_1}[W(v_3,v_6)]$
\end{example}

% subsection the_syntax_and_semantics_of_the_notation_system (end)   